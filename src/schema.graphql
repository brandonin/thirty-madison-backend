### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Board {
  id: String!
  squares(after: SquareWhereUniqueInput, before: SquareWhereUniqueInput, first: Int, last: Int, orderBy: SquareOrderByInput, skip: Int): [Square!]!
}

input BoardCreateOneWithoutGameInput {
  connect: BoardWhereUniqueInput
  create: BoardCreateWithoutGameInput
}

input BoardCreateWithoutGameInput {
  createdAt: DateTime
  id: String
  squares: SquareCreateManyWithoutBoardInput
  updatedAt: DateTime
}

input BoardCreateWithoutSquaresInput {
  createdAt: DateTime
  game: GameCreateOneWithoutBoardInput!
  id: String
  updatedAt: DateTime
}

input BoardUpdateOneRequiredWithoutGameInput {
  connect: BoardWhereUniqueInput
  create: BoardCreateWithoutGameInput
  update: BoardUpdateWithoutGameDataInput
  upsert: BoardUpsertWithoutGameInput
}

input BoardUpdateOneRequiredWithoutSquaresInput {
  connect: BoardWhereUniqueInput
  create: BoardCreateWithoutSquaresInput
  update: BoardUpdateWithoutSquaresDataInput
  upsert: BoardUpsertWithoutSquaresInput
}

input BoardUpdateWithoutGameDataInput {
  createdAt: DateTime
  id: String
  squares: SquareUpdateManyWithoutBoardInput
  updatedAt: DateTime
}

input BoardUpdateWithoutSquaresDataInput {
  createdAt: DateTime
  game: GameUpdateOneRequiredWithoutBoardInput
  id: String
  updatedAt: DateTime
}

input BoardUpsertWithoutGameInput {
  create: BoardCreateWithoutGameInput!
  update: BoardUpdateWithoutGameDataInput!
}

input BoardUpsertWithoutSquaresInput {
  create: BoardCreateWithoutSquaresInput!
  update: BoardUpdateWithoutSquaresDataInput!
}

input BoardWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Game {
  board: Board!
  id: String!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
  whosTurn: User!
}

input GameCreateInput {
  board: BoardCreateOneWithoutGameInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  users: UserCreateManyWithoutGameInput
  whosTurn: UserCreateOneWithoutWhosTurnOfInput!
}

input GameCreateOneWithoutBoardInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutBoardInput
}

input GameCreateOneWithoutUsersInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutUsersInput
}

input GameCreateOneWithoutWhosTurnInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutWhosTurnInput
}

input GameCreateWithoutBoardInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  users: UserCreateManyWithoutGameInput
  whosTurn: UserCreateOneWithoutWhosTurnOfInput!
}

input GameCreateWithoutUsersInput {
  board: BoardCreateOneWithoutGameInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  whosTurn: UserCreateOneWithoutWhosTurnOfInput!
}

input GameCreateWithoutWhosTurnInput {
  board: BoardCreateOneWithoutGameInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  users: UserCreateManyWithoutGameInput
}

input GameUpdateInput {
  board: BoardUpdateOneRequiredWithoutGameInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutGameInput
  whosTurn: UserUpdateOneRequiredWithoutWhosTurnOfInput
}

input GameUpdateOneRequiredWithoutBoardInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutBoardInput
  update: GameUpdateWithoutBoardDataInput
  upsert: GameUpsertWithoutBoardInput
}

input GameUpdateOneRequiredWithoutWhosTurnInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutWhosTurnInput
  update: GameUpdateWithoutWhosTurnDataInput
  upsert: GameUpsertWithoutWhosTurnInput
}

input GameUpdateOneWithoutUsersInput {
  connect: GameWhereUniqueInput
  create: GameCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GameUpdateWithoutUsersDataInput
  upsert: GameUpsertWithoutUsersInput
}

input GameUpdateWithoutBoardDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutGameInput
  whosTurn: UserUpdateOneRequiredWithoutWhosTurnOfInput
}

input GameUpdateWithoutUsersDataInput {
  board: BoardUpdateOneRequiredWithoutGameInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  whosTurn: UserUpdateOneRequiredWithoutWhosTurnOfInput
}

input GameUpdateWithoutWhosTurnDataInput {
  board: BoardUpdateOneRequiredWithoutGameInput
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutGameInput
}

input GameUpsertWithoutBoardInput {
  create: GameCreateWithoutBoardInput!
  update: GameUpdateWithoutBoardDataInput!
}

input GameUpsertWithoutUsersInput {
  create: GameCreateWithoutUsersInput!
  update: GameUpdateWithoutUsersDataInput!
}

input GameUpsertWithoutWhosTurnInput {
  create: GameCreateWithoutWhosTurnInput!
  update: GameUpdateWithoutWhosTurnDataInput!
}

input GameWhereUniqueInput {
  id: String
}

type Initialize {
  game: Game!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneGame(data: GameCreateInput!): Game!
  initialize(username1: String, username2: String): Initialize!
  reset(boardId: String): Reset!
  updateOneGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  updateOneScore(data: ScoreUpdateInput!, where: ScoreWhereUniqueInput!): Score
  updateOneSquare(data: SquareUpdateInput!, where: SquareWhereUniqueInput!): Square
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  board(where: BoardWhereUniqueInput!): Board
  game(where: GameWhereUniqueInput!): Game
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int): [User!]!
}

type Reset {
  board: Board!
}

type Score {
  id: String!
  user: User!
  value: Int!
}

input ScoreCreateOneWithoutUserInput {
  connect: ScoreWhereUniqueInput
  create: ScoreCreateWithoutUserInput
}

input ScoreCreateWithoutUserInput {
  id: String
  updatedAt: DateTime
  value: Int
}

input ScoreUpdateInput {
  id: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutScoreInput
  value: Int
}

input ScoreUpdateOneRequiredWithoutUserInput {
  connect: ScoreWhereUniqueInput
  create: ScoreCreateWithoutUserInput
  update: ScoreUpdateWithoutUserDataInput
  upsert: ScoreUpsertWithoutUserInput
}

input ScoreUpdateWithoutUserDataInput {
  id: String
  updatedAt: DateTime
  value: Int
}

input ScoreUpsertWithoutUserInput {
  create: ScoreCreateWithoutUserInput!
  update: ScoreUpdateWithoutUserDataInput!
}

input ScoreWhereUniqueInput {
  id: String
}

type Square {
  createdAt: DateTime!
  id: String!
  position: Int!
  value: String!
}

input SquareCreateManyWithoutBoardInput {
  connect: [SquareWhereUniqueInput!]
  create: [SquareCreateWithoutBoardInput!]
}

input SquareCreateWithoutBoardInput {
  createdAt: DateTime
  id: String
  position: Int!
  updatedAt: DateTime
  value: String
}

input SquareOrderByInput {
  boardId: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  position: OrderByArg
  updatedAt: OrderByArg
  value: OrderByArg
}

input SquareScalarWhereInput {
  AND: [SquareScalarWhereInput!]
  boardId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SquareScalarWhereInput!]
  OR: [SquareScalarWhereInput!]
  position: IntFilter
  updatedAt: DateTimeFilter
  value: StringFilter
}

input SquareUpdateInput {
  board: BoardUpdateOneRequiredWithoutSquaresInput
  createdAt: DateTime
  id: String
  position: Int
  updatedAt: DateTime
  value: String
}

input SquareUpdateManyDataInput {
  createdAt: DateTime
  id: String
  position: Int
  updatedAt: DateTime
  value: String
}

input SquareUpdateManyWithoutBoardInput {
  connect: [SquareWhereUniqueInput!]
  create: [SquareCreateWithoutBoardInput!]
  delete: [SquareWhereUniqueInput!]
  deleteMany: [SquareScalarWhereInput!]
  disconnect: [SquareWhereUniqueInput!]
  set: [SquareWhereUniqueInput!]
  update: [SquareUpdateWithWhereUniqueWithoutBoardInput!]
  updateMany: [SquareUpdateManyWithWhereNestedInput!]
  upsert: [SquareUpsertWithWhereUniqueWithoutBoardInput!]
}

input SquareUpdateManyWithWhereNestedInput {
  data: SquareUpdateManyDataInput!
  where: SquareScalarWhereInput!
}

input SquareUpdateWithoutBoardDataInput {
  createdAt: DateTime
  id: String
  position: Int
  updatedAt: DateTime
  value: String
}

input SquareUpdateWithWhereUniqueWithoutBoardInput {
  data: SquareUpdateWithoutBoardDataInput!
  where: SquareWhereUniqueInput!
}

input SquareUpsertWithWhereUniqueWithoutBoardInput {
  create: SquareCreateWithoutBoardInput!
  update: SquareUpdateWithoutBoardDataInput!
  where: SquareWhereUniqueInput!
}

input SquareWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  game: Game
  id: String!
  name: String!
  score: Score!
  symbol: String!
}

input UserCreateManyWithoutGameInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGameInput!]
}

input UserCreateOneWithoutWhosTurnOfInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWhosTurnOfInput
}

input UserCreateWithoutGameInput {
  createdAt: DateTime
  id: String
  name: String!
  score: ScoreCreateOneWithoutUserInput!
  symbol: String!
  updatedAt: DateTime
  whosTurnOf: GameCreateOneWithoutWhosTurnInput!
}

input UserCreateWithoutScoreInput {
  createdAt: DateTime
  game: GameCreateOneWithoutUsersInput
  id: String
  name: String!
  symbol: String!
  updatedAt: DateTime
  whosTurnOf: GameCreateOneWithoutWhosTurnInput!
}

input UserCreateWithoutWhosTurnOfInput {
  createdAt: DateTime
  game: GameCreateOneWithoutUsersInput
  id: String
  name: String!
  score: ScoreCreateOneWithoutUserInput!
  symbol: String!
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: OrderByArg
  gameId: OrderByArg
  id: OrderByArg
  name: OrderByArg
  symbol: OrderByArg
  updatedAt: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  createdAt: DateTimeFilter
  gameId: NullableStringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  symbol: StringFilter
  updatedAt: DateTimeFilter
}

input UserUpdateManyDataInput {
  createdAt: DateTime
  id: String
  name: String
  symbol: String
  updatedAt: DateTime
}

input UserUpdateManyWithoutGameInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGameInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGameInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGameInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutScoreInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutScoreInput
  update: UserUpdateWithoutScoreDataInput
  upsert: UserUpsertWithoutScoreInput
}

input UserUpdateOneRequiredWithoutWhosTurnOfInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWhosTurnOfInput
  update: UserUpdateWithoutWhosTurnOfDataInput
  upsert: UserUpsertWithoutWhosTurnOfInput
}

input UserUpdateWithoutGameDataInput {
  createdAt: DateTime
  id: String
  name: String
  score: ScoreUpdateOneRequiredWithoutUserInput
  symbol: String
  updatedAt: DateTime
  whosTurnOf: GameUpdateOneRequiredWithoutWhosTurnInput
}

input UserUpdateWithoutScoreDataInput {
  createdAt: DateTime
  game: GameUpdateOneWithoutUsersInput
  id: String
  name: String
  symbol: String
  updatedAt: DateTime
  whosTurnOf: GameUpdateOneRequiredWithoutWhosTurnInput
}

input UserUpdateWithoutWhosTurnOfDataInput {
  createdAt: DateTime
  game: GameUpdateOneWithoutUsersInput
  id: String
  name: String
  score: ScoreUpdateOneRequiredWithoutUserInput
  symbol: String
  updatedAt: DateTime
}

input UserUpdateWithWhereUniqueWithoutGameInput {
  data: UserUpdateWithoutGameDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutScoreInput {
  create: UserCreateWithoutScoreInput!
  update: UserUpdateWithoutScoreDataInput!
}

input UserUpsertWithoutWhosTurnOfInput {
  create: UserCreateWithoutWhosTurnOfInput!
  update: UserUpdateWithoutWhosTurnOfDataInput!
}

input UserUpsertWithWhereUniqueWithoutGameInput {
  create: UserCreateWithoutGameInput!
  update: UserUpdateWithoutGameDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  id: String
}
